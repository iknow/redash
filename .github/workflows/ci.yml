name: Docker builds
on:
  push:
    branches:
      - master
  pull_request_target:
    branches:
      - master
env:
  NODE_VERSION: 16.20.1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  backend-lint:
    runs-on: ubuntu-22.04
    steps:
      - if: github.event.pull_request.mergeable == 'false'
        name: Exit if PR is not mergeable
        run: exit 1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - run: sudo pip install black==23.1.0 ruff==0.0.287
      - run: ruff check .
      - run: black --check .

  backend-unit-tests:
    runs-on: ubuntu-22.04
    needs: backend-lint
    env:
      COMPOSE_FILE: .ci/compose.ci.yaml
      COMPOSE_PROJECT_NAME: redash
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
    steps:
      - if: github.event.pull_request.mergeable == 'false'
        name: Exit if PR is not mergeable
        run: exit 1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Build Docker Images
        run: |
          set -x
          docker compose build --build-arg install_groups="main,all_ds,dev" --build-arg skip_frontend_build=true
          docker compose up -d
          sleep 10
      - name: Create Test Database
        run: docker compose -p redash run --rm postgres psql -h postgres -U postgres -c "create database tests;"
      - name: List Enabled Query Runners
        run: docker compose -p redash run --rm redash manage ds list_types
      - name: Run Tests
        run: docker compose -p redash run --name tests redash tests --junitxml=junit.xml --cov-report=xml --cov=redash --cov-config=.coveragerc tests/
      - name: Copy Test Results
        run: |
          mkdir -p /tmp/test-results/unit-tests
          docker cp tests:/app/coverage.xml ./coverage.xml
          docker cp tests:/app/junit.xml /tmp/test-results/unit-tests/results.xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
      - name: Store Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: /tmp/test-results
      - name: Store Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml

  frontend-lint:
    runs-on: ubuntu-22.04
    steps:
      - if: github.event.pull_request.mergeable == 'false'
        name: Exit if PR is not mergeable
        run: exit 1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install Dependencies
        run: |
          npm install --global --force yarn@1.22.19
          yarn cache clean && yarn --frozen-lockfile --network-concurrency 1
      - name: Run Lint
        run: yarn lint:ci
      - name: Store Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: /tmp/test-results

  frontend-unit-tests:
    runs-on: ubuntu-22.04
    needs: frontend-lint
    steps:
      - if: github.event.pull_request.mergeable == 'false'
        name: Exit if PR is not mergeable
        run: exit 1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install Dependencies
        run: |
          npm install --global --force yarn@1.22.19
          yarn cache clean && yarn --frozen-lockfile --network-concurrency 1
      - name: Run App Tests
        run: yarn test
      - name: Run Visualizations Tests
        run: cd viz-lib && yarn test
      - run: yarn lint

  build-docker-image:
    runs-on: ubuntu-22.04
    needs:
      - backend-unit-tests
      - frontend-unit-tests
    steps:
      - if: github.event.pull_request.mergeable == 'false'
        name: Exit if PR is not mergeable
        run: exit 1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install Dependencies
        run: |
          npm install --global --force yarn@1.22.19
          yarn cache clean && yarn --frozen-lockfile --network-concurrency 1

      - name: Set up QEMU
        timeout-minutes: 1
        uses: docker/setup-qemu-action@v2.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version
        id: version
        run: |
          set -x
          .ci/update_version
          VERSION=$(jq -r .version package.json)
          VERSION_TAG="${VERSION}.b${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}"
          echo "VERSION_TAG=$VERSION_TAG" >> "$GITHUB_OUTPUT"
          
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push preview image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          context: .
          build-args: |
            test_all_deps=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: "linux/amd64"
        env:
          DOCKER_CONTENT_TRUST: true
          
      - name: "Failure: output container logs to console"
        if: failure()
        run: docker compose logs
